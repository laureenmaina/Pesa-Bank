{"ast":null,"code":"var _jsxFileName = \"/home/laurine/development/phase4/Pesa-Bank/Frontend/src/components/Transactions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Transactions() {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [newTransaction, setNewTransaction] = useState({\n    user_id: '',\n    amount: '',\n    type: ''\n  });\n  const [error, setError] = useState(null);\n  const fetchTransactions = async () => {\n    try {\n      const response = await fetch('http://localhost:4000/transactions'); // Adjust the URL as needed\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setTransactions(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewTransaction(prevTransaction => ({\n      ...prevTransaction,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:4000/transactions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTransaction)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to create transaction');\n      }\n      setNewTransaction({\n        user_id: '',\n        amount: '',\n        type: ''\n      });\n      fetchTransactions();\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const handleDelete = async id => {\n    try {\n      const response = await fetch(`http://localhost:4000/transactions/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to delete transaction');\n      }\n      fetchTransactions();\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const handleUpdate = async id => {\n    try {\n      const response = await fetch(`http://localhost:4000/transactions/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTransaction)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to update transaction');\n      }\n      setNewTransaction({\n        user_id: '',\n        amount: '',\n        type: ''\n      });\n      fetchTransactions();\n      one;\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  useEffect(() => {\n    fetchTransactions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchTransactions,\n      children: \"Fetch Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [transaction.user_id, \" - \", transaction.amount, \" - \", transaction.type, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDelete(transaction.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUpdate(transaction.id),\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, transaction.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add a New Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"user_id\",\n        value: newTransaction.user_id,\n        onChange: handleChange,\n        placeholder: \"User ID\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"amount\",\n        value: newTransaction.amount,\n        onChange: handleChange,\n        placeholder: \"Amount\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"type\",\n        value: newTransaction.type,\n        onChange: handleChange,\n        placeholder: \"Type (e.g., DEPOSIT, WITHDRAWAL)\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(Transactions, \"Jxm68C6+MavLRekQB5clA1gI2Us=\");\n_c = Transactions;\nexport default Transactions;\nvar _c;\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Transactions","_s","transactions","setTransactions","newTransaction","setNewTransaction","user_id","amount","type","error","setError","fetchTransactions","response","fetch","ok","Error","data","json","message","handleChange","e","name","value","target","prevTransaction","handleSubmit","preventDefault","method","headers","body","JSON","stringify","errorData","handleDelete","id","handleUpdate","one","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","transaction","onSubmit","onChange","placeholder","required","_c","$RefreshReg$"],"sources":["/home/laurine/development/phase4/Pesa-Bank/Frontend/src/components/Transactions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction Transactions() {\n  const [transactions, setTransactions] = useState([]);\n  const [newTransaction, setNewTransaction] = useState({\n    user_id: '',\n    amount: '',\n    type: ''\n  });\n  const [error, setError] = useState(null);\n\n  const fetchTransactions = async () => {\n    try {\n      const response = await fetch('http://localhost:4000/transactions'); // Adjust the URL as needed\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setTransactions(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setNewTransaction((prevTransaction) => ({\n      ...prevTransaction,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:4000/transactions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTransaction)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to create transaction');\n      }\n      setNewTransaction({\n        user_id: '',\n        amount: '',\n        type: ''\n      });\n      fetchTransactions();\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  const handleDelete = async (id) => {\n    try {\n      const response = await fetch(`http://localhost:4000/transactions/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to delete transaction');\n      }\n      fetchTransactions(); \n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  const handleUpdate = async (id) => {\n    try {\n      const response = await fetch(`http://localhost:4000/transactions/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTransaction)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to update transaction');\n      }\n      setNewTransaction({\n        user_id: '',\n        amount: '',\n        type: ''\n      });\n      fetchTransactions(); one\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  useEffect(() => {\n    fetchTransactions();\n  }, []);\n\n  return (\n    <div>\n      <h1>My Transactions</h1>\n      <button onClick={fetchTransactions}>Fetch Transactions</button>\n      {error && <p>{error}</p>}\n      <ul>\n        {transactions.map((transaction) => (\n          <li key={transaction.id}>\n            {transaction.user_id} - {transaction.amount} - {transaction.type}\n            <button onClick={() => handleDelete(transaction.id)}>Delete</button>\n            <button onClick={() => handleUpdate(transaction.id)}>Update</button>\n          </li>\n        ))}\n      </ul>\n      <h2>Add a New Transaction</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"number\"\n          name=\"user_id\"\n          value={newTransaction.user_id}\n          onChange={handleChange}\n          placeholder=\"User ID\"\n          required\n        />\n        <input\n          type=\"number\"\n          name=\"amount\"\n          value={newTransaction.amount}\n          onChange={handleChange}\n          placeholder=\"Amount\"\n          required\n        />\n        <input\n          type=\"text\"\n          name=\"type\"\n          value={newTransaction.type}\n          onChange={handleChange}\n          placeholder=\"Type (e.g., DEPOSIT, WITHDRAWAL)\"\n          required\n        />\n        <button type=\"submit\">Add Transaction</button>\n      </form>\n    </div>\n  );\n}\n\nexport default Transactions;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}